pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-credentials'
        DOCKER_IMAGE = "ineslemos/jenkins-image"
        DOCKER_REGISTRY = "https://index.docker.io/v1/"
        REPO_URL = 'https://github.com/vapreace/devops-23-24-JPE-PSM-1231832.git'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out from repository...'
                git branch: 'main', url: env.REPO_URL
            }
        }
        stage('Create Dockerfile') {
            steps {
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    echo 'Creating Dockerfile...'
                    script {
                        writeFile file: 'Dockerfile', text: '''
                        # Use the official OpenJDK image as a parent image
                        FROM openjdk:17-jdk-alpine

                        # Set the working directory in the container
                        WORKDIR /app

                        # Copy the JAR file from the host to the container
                        COPY build/libs/*.jar app.jar

                        # Expose the port that the application will run on
                        EXPOSE 8080

                        # Run the JAR file
                        ENTRYPOINT ["java", "-jar", "app.jar"]
                        '''
                    }
                }
            }
        }
        stage('Assemble') {
            steps {
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    echo 'Assembling...'
                    sh 'chmod +x gradlew'
                    sh './gradlew clean assemble'
                }
            }
        }
        stage('Test') {
            steps {
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    echo 'Testing...'
                    sh './gradlew test'
                    junit '**/build/test-results/test/*.xml'
                }
            }
        }
        stage('Javadoc') {
            steps {
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    echo 'Generating Javadoc...'
                    sh './gradlew javadoc'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/docs/javadoc', reportFiles: 'index.html', reportName: 'Javadoc'])
                }
            }
        }
        stage('Archive') {
            steps {
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    echo 'Archiving...'
                    archiveArtifacts artifacts: 'build/libs/*.jar', allowEmptyArchive: true
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('CA2/Part2/react-and-spring-data-rest-basic') {
                    script {
                        echo 'Building Docker Image...'
                        sh 'docker info'
                        def app = docker.build("${env.DOCKER_IMAGE}:${env.BUILD_ID}", '.')
                        docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIALS_ID) {
                            app.push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}